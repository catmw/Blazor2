@page "/products/create"
@using Services
@using L00172691_BlazorServer.Models.Models
@inject NavigationManager _navigationManager;
@inject IUnitOfWork _unitOfWork;

@rendermode InteractiveServer

<div class="row my-2">
	<h3 class="card-title text-primary mb-3 ml-3"> Create Product</h3>

	<div class="col-10">

		<EditForm Model="Product" FormName="CreateProductForm" OnValidSubmit="Create">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="form-group">
				<label>Name</label>
				<InputText id="Name" @bind-Value="Product.Name" class="form-control"> </InputText>
				<ValidationMessage For="() => Product.Name" />
			</div>

			<div class="form-group">
				<label>Description</label>
				<InputText id="Description" @bind-Value="Product.description" class="form-control"> </InputText>

			</div>
			<div class="form-group">
				<label>Price</label>
				<InputNumber id="Price" @bind-Value="Product.Price" class="form-control"> </InputNumber>

			</div>
			<div class="form-group">
				<label>Category</label>
				<InputSelect id="CategoryID" @bind-Value="Product.CategoryID" class="form-control">
					<option value=0 disabled="disabled"> -----Select Category</option>
					@foreach (var cat in listOfCategories)
					{
						<option value="@cat.Id">@cat.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => Product.CategoryID" />
			</div>
			<div class="form-group">
				<label>Image</label>
				@* <InputFile OnChange="HandleImageUpLoad" />
				<InputText id="Image" @bind-Value="Product.ImageName" class="form-control"> </InputText> *@

			</div>


			<div class="form-group py-2">
				<button class="btn btn-primary" type="submit">Create</button>
				<NavLink href="products" class="btn btn-secondary"> Back to Index</NavLink>
			</div>

		</EditForm>
	</div>

	<div class="col-md-2">
		<img src="@Product.ImageName" class="w-100" />
	</div>
</div>



@code {

	private Product Product { get; set; } = new Product()
		{
			ImageName = "image/products/default.png"
		};

	private IEnumerable<Category> listOfCategories = new List<Category>();

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(LoadCategories);
	}

	private void LoadCategories()
	{
		listOfCategories = _unitOfWork.CategoryRepo.GetAll();
	}

	private void Create()
	{
		_unitOfWork.ProductRepo.Add(Product);
		_unitOfWork.Save();
		_navigationManager.NavigateTo("/products");
	}

	/*private async Task HandleImageUpLoad(InputFileChangeEventArgs e)
	{
		try
		{
			if (e.GetMultipleFiles().Count() > 0)
			{
				System.IO.FileInfo file = new System.IO.FileInfo(e.File.Name);
				Product.ImageName = await _fileMgt.FileUpLoad(e.File);
			}
		}
		catch (Exception ex)
		{
			_navigationManager.NavigateTo("/product");
		}

	}*/
}
